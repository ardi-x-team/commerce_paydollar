<?php

/**
 * @file
 * 
 * Provide a PayDollar API payment method for Drupal Commerce.
 */

// PayDollar transaction mode definitions.
define('PAYDOLLAR_TXN_MODE_LIVE', 'live');
define('PAYDOLLAR_TXN_MODE_TEST', 'test');

// PayDollar URLs for live and test environments.
define('PAYDOLLAR_SERVER_LIVE', 'https://www.paydollar.com/b2c2/eng/directPay/payComp.jsp');
define('PAYDOLLAR_SERVER_TEST', 'https://test.paydollar.com/b2cDemo/eng/directPay/payComp.jsp');

/**
 * Specify default settings for PayDollar API.
 *
 * @return
 *   An associative array of default settings for PayDollar API, which contained:
 *   - order_ref: Merchant's Order Reference Number.
 *   - amount: The total amount to charge.
 *   - curr_code: Currency payment.
 *   - lang: Language payment type.
 *   - merchant_id: Id of Merchant
 *   - p_method: Payment card type.
 *   - ep_month: Credit card expiry month.
 *   - ep_year: Credit card expiry year.
 *   - security_code: CVV number.
 *   - card_holder: Card holder name.
 *   - card_no: Credit card number.
 *   - pay_type: Payment type.
 *   - remark: Additional remark.
 *   - ori_country: Origin country code.
 *   - dest_country: Destination country code.
 *   - is_secure_hash_setting: is transaction using Secure Hash?
 *   - secure_hash_secret: Secret Hash from PayDollar API.
 *   - is_3d: if transaction using 3D Transaction.
 *   - transact_mode: Transaction mode (for this module purpose only).
 */
function commerce_paydollar_default_settings() {
  return array(
    'order_ref' => '', 
    'amount' => '', 
    'curr_code' => '', 
    'lang' => 'E', 
    'merchant_id' => '', 
    'p_method' => '', 
    'ep_month' => '', 
    'ep_year' => '', 
    'security_code' => '', 
    'card_holder' => '', 
    'card_no' => '', 
    'pay_type' => 'N', 
    'remark' => 'remark', 
    'ori_country' => '', 
    'dest_country' => '', 
    'is_secure_hash_setting' => TRUE, 
    'secure_hash_secret' => '', 
    'is_3d' => FALSE, 
    'transact_mode' => PAYDOLLAR_TXN_MODE_TEST, 
  );
}

/**
 * Define Credit Card type based on PayDollar requirement.
 */
function commerce_paydollar_cc_type($cc_type) {
  $cc_kind = array(
    'visa' => 'VISA',
    'mastercard' => 'Master',
    'amex' => 'AMEX',
    'dc' => 'Diners',
    'jcb' => 'JCB',
  );
  return $cc_kind[$cc_type];
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_paydollar_commerce_payment_method_info() {
  $payment_methods = array();
  $payment_methods['commerce_paydollar'] = array(
    'title' => t('PayDollar'),
    'short_title' => t('PayDollar'),
    'display_title' => t('PayDollar'),
    'description' => t('Integration with PayDollar API.'),
    'active' => TRUE
  );
  return $payment_methods;
}

/**
 * Settings form for PayDollar API payment method.
 * Used to set merchant id.
 */
function commerce_paydollar_settings_form($settings = NULL) {
  $form = array();
  // Merge default settings into the stored settings array.
  $settings = (array) $settings + commerce_paydollar_default_settings();

  $form['merchant_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant ID'),
    '#description' => t('This is the merchant ID that PayDollar sent you when you set up your account.'),
    '#default_value' => $settings['merchant_id'],
    '#required' => TRUE,
  );
  $form['transact_mode'] = array(
    '#type' => 'radios',
    '#title' => t('Transaction mode'),
    '#description' => t('Adjust to live transactions when you are ready to start processing actual payments.'),
    '#options' => array(
      PAYDOLLAR_TXN_MODE_LIVE => t('Live transactions in a live account'),
      PAYDOLLAR_TXN_MODE_TEST => t('Test transactions in a test account'),
    ),
    '#default_value' => $settings['transact_mode'],
  );
  $form['secure_hash_secret'] = array(
    '#type' => 'textfield',
    '#title' => t('Secure hash secret'),
    '#description' => t('provided by PayDollar.'),
    '#default_value' => $settings['secure_hash_secret'],
    '#required' => TRUE,
  );
  
  $form['lang'] = array(
    '#type' => 'select',
    '#title' => t('The language of the payment type.'),
    '#description' => t('Select your currency.'),
    '#options' => array(
      'C' => t('Traditional Chinese'),
      'E' => t('English'),
      'X' => t('Simplified Chinese'),
      'K' => t('Korean'),
      'J' => t('Japanese'),
      'T' => t('Thai'),
    ),
    '#default_value' => $settings['lang'],
  );
  $form['curr_code'] = array(
    '#type' => 'select',
    '#title' => t('Currency Payment'),
    '#description' => t('Select your currency.'),
    '#options' => array(
      344 => t('HKD'), 840 => t('USD'), 702 => t('SGD'),
      156 => t('CNY'), 392 => t('JPY'), 901 => t('TWD'),
      036 => t('AUD'), 978 => t('EUR'), 826 => t('GPB'),
      124 => t('CAD'), 446 => t('MOP'), 608 => t('PHP'),
      764 => t('THB'), 458 => t('MYR'), 360 => t('IDR'),
      410 => t('KRW'), 682 => t('SAR'), 554 => t('NZD'),
      784 => t('AED'), 096 => t('BND'),
    ),
    '#default_value' => $settings['curr_code'],
  );
  $form['lang'] = array(
    '#type' => 'select',
    '#title' => t('The language of the payment type.'),
    '#description' => t('Select your currency.'),
    '#options' => array(
      'C' => t('Traditional Chinese'),
      'E' => t('English'),
      'X' => t('Simplified Chinese'),
      'K' => t('Korean'),
      'J' => t('Japanese'),
      'T' => t('Thai'),
    ),
    '#default_value' => $settings['lang'],
  );
  $form['pay_type'] = array(
    '#type' => 'select',
    '#title' => t('Payment Type'),
    '#description' => t('Select your payment type.'),
    '#options' => array(
      'N' => t('Normal Payment (Sales)'),
      'H' => t('Hold Payment (Authorize only)'),
    ),
    '#default_value' => $settings['pay_type'],                          
  );
  return $form;
}

/**
 * Payment method callback: submit form.
 */
function commerce_paydollar_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
  $credit_card_settings = array(
    'type' => array(
      'visa',
      'mastercard',
      'amex',
      'jcb',
      'dc',
    ),
    'number' => '',
    'code' => '',
    'owner' => '',
  );
  return commerce_payment_credit_card_form($credit_card_settings);
}

/**
 * Payment method callback: submit form validation.
 */
function commerce_paydollar_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
  // Validate the credit card fields.
  $settings = array(
    'form_parents' => array_merge($form_parents, array('credit_card')),
  );
  
  if (!commerce_payment_credit_card_validate($pane_values['credit_card'], $settings)) {
    return FALSE;
  }
}

/**
 * Payment method callback: submit form submission.
 */
function commerce_paydollar_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  module_load_include('inc', 'commerce_paydollar', 'includes/sha_paydollar_secure');
  
  // grab some settings from default setting.
  $default_setting = commerce_paydollar_default_settings();
  
  $order_ref = $order->order_id; 
  $amount = sprintf(commerce_currency_amount_to_decimal($charge['amount'], $charge['currency_code'])); 
  $curr_code = $payment_method['settings']['curr_code']; 
  $lang = $payment_method['settings']['lang']; 
  $merchant_id = $payment_method['settings']['merchant_id']; 
  $card_no = $pane_values['credit_card']['number'];
  $p_method = commerce_paydollar_cc_type($pane_values['credit_card']['type']);
  $ep_month = $pane_values['credit_card']['exp_month']; 
  $ep_year = $pane_values['credit_card']['exp_year']; 
  $security_code = $pane_values['credit_card']['code']; 
  $card_holder = $pane_values['credit_card']['owner']; 
  $pay_type = $default_setting['pay_type']; 
  $remark = $default_setting['remark']; 
  $ori_country = $default_setting['ori_country']; 
  $dest_country = $default_setting['dest_country']; 
  
  // Generate the secure hash.
  $secure_hash_secret = $payment_method['settings']['secure_hash_secret']; 
  $paydollar_secure = new SHAPaydollarSecure(); 
  $secure_hash = $paydollar_secure->generatePaymentSecureHash($merchant_id, $order_ref, $curr_code, $amount, $pay_type, $secure_hash_secret);
  $server_url = ($payment_method['settings']['transact_mode'] == PAYDOLLAR_TXN_MODE_LIVE) ? PAYDOLLAR_SERVER_LIVE : PAYDOLLAR_SERVER_TEST;

  // Generate data POST for form submission.
  $post_data = 'lang=' . urlencode($lang) . '&merchantId=' . urlencode($merchant_id);
  $post_data .= '&orderRef=' . urlencode($order_ref) . '&currCode=' . urlencode($curr_code);
  $post_data .= '&amount=' . urlencode($amount) . '&payType=' . urlencode($pay_type);
  $post_data .= '&remark=' . urlencode($remark) . '&pMethod=' . urlencode($p_method);
  $post_data .= '&cardNo=' . urlencode($card_no) . '&securityCode=' . urlencode($security_code);
  $post_data .= '&epMonth=' . urlencode($ep_month) . '&epYear=' . urlencode($ep_year);
  $post_data .= '&cardHolder=' . urlencode($card_holder);

  // if Secure Hash is used
  if ($default_setting['is_secure_hash_setting']) {
    $post_data .= '&secureHash=' . urlencode($secure_hash);
  }   
  
  // post data to Paydollar System,and get the result
  $data = commerce_paydollar_curlpost($server_url, $post_data);
  // get the respond message from PayDollar server.
  $result = explode('&', $data);
  $result_array = array();
  foreach ($result as $key => $value) {
    $emp_array = explode('=', $value);
    $length = count($emp_array);
    if ($length == 2) {
      $result_array[$emp_array[0]] = $emp_array[1];
    }
    if ($length == 1) {
      $result_array[$emp_array[0]] = '';
    }
  }
  // if payment fail then redirect back to checkout page.  
  if ($result_array['successcode'] != '0') {
    drupal_set_message(t('Payment is not successful. %message', array('%message' => $result_array['errMsg'])), 'error');
    watchdog('commerce_paydollar', 'Payment failed: %message', array('%message' => $data), WATCHDOG_WARNING);
    drupal_goto('checkout');
  }
  else{
    watchdog('commerce_paydollar', 'Payment success: %message', array('%message' => $data));
    return TRUE;  
  }
}

/**
 * Define function for POST by using curl.
 */
function commerce_paydollar_curlpost($url, $curlPost, $timeout = 30) {
  $ssl = substr($url, 0, 8) == "https://" ? TRUE : FALSE;
  $ch = curl_init();

  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_HEADER, 0);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_POST, 1);
  curl_setopt($ch, CURLOPT_POSTFIELDS, $curlPost);
  curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);
  if ($ssl) {
    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 1);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
  }
  $data = curl_exec($ch);
  curl_close($ch);
  return $data;
}

